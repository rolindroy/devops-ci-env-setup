---
#Creating Ec2 instance for Automated QA Process

- hosts: localhost
  connection: local
  gather_facts: no
  remote_user: ubuntu
  vars:
    ec2_region: us-east-1
    ec2_instance_type: t2.micro
    ec2_image: ami-c8580bdf
    ec2_keypair: bastion-key
    ec2_security_group: sg_ec2_public
    ec2_tag_Name: DynamicQA
    ec2_subnet_ids: subnet-04d43938
    ec2_tag_Type: webserver
    ec2_tag_Environment: DynamicQA
    ec2_volume_size: 8

  tasks:
    - name: Finding all running instances
      ec2_remote_facts:
        filters:
          instance-state-name: running
          "tag:Name": "{{ ec2_tag_Name }}"
        region: "{{ ec2_region }}"
      register: all_ec2

    - debug: var=item
      with_items: "{{ all_ec2.instances }}"

    - name: Terminate all existing Ec2 instances
      local_action:
        module: ec2
        region: "{{ ec2_region }}"
        state: absent
        instance_ids: '{{ item.id }}'
      ignore_errors: true
      with_items: "{{ all_ec2.instances }}"

    - name: launch ec2 instance for QA
      local_action:
        module: ec2
        key_name: "{{ ec2_keypair }}"
        group: "{{ ec2_security_group }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ec2_image }}"
        vpc_subnet_id: "{{ ec2_subnet_ids }}"
        region: "{{ ec2_region }}"
        instance_tags: '{"Name":"{{ec2_tag_Name}}","Type":"{{ec2_tag_Type}}","Environment":"{{ec2_tag_Environment}}"}'
        assign_public_ip: yes
        wait: true
        count: 1
      register: ec2

    - debug: var=item
      with_items: "{{ ec2.instances }}"

    - add_host:
        name: "{{ item.public_ip }}"
        groups: dynamically_created_hosts
      with_items: "{{ ec2.instances }}"

    - name: Wait for the instances to boot by checking the ssh port
      wait_for: host="{{ item.public_ip }}" port=22 delay=60 timeout=320 state=started
      with_items: "{{ ec2.instances }}"
## create ec2 instance ends here
## Provisionig newly created Ec2 Instance

- name: Initializing DevOps QA Env-Setup
  hosts: dynamically_created_hosts
  sudo: True
  pre_tasks:
    - name: Installing repo for Java Open JDK 8.
      apt_repository: repo='ppa:openjdk-r/ppa'

    - name: Updating apt-cache for Java Open JDK 8.
      apt: update_cache=yes

    - name: Installing Curl and wget
      apt: pkg={{ item }} state=latest
      with_items:
        - curl
        - wget
        - zip
        - unzip
        - git
  roles:
    - role: java
      when: "ansible_os_family == 'Debian'"
      java_packages:
        - openjdk-8-jdk

    - role: maven

  tasks:
    # - name: Install Docker
    #   apt: pkg={{ item }} state=latest
    #   with_items:
    #     - docker
    #     - docker.io
    #   ignore_errors: True

    - name: Install Docker
      shell: curl -sSL https://get.docker.com/ | sh

    - name: Update docker service to run without sudo
      user: name={{ item }} groups=docker append=yes
      sudo: true
      with_items:
        - "{{ ubuntu_user }}"
      register: docker_group

    - name: Kill open ssh sessions
      shell: "ps -ef | grep sshd | grep jenkins | awk '{print \"kill -9\", $2}' | sh"
      when: docker_group | changed
      failed_when: false

    - name: Updating apt-cache
      apt: update_cache=yes

    - name: Create Slave directory
      file:
        path: "/home/{{ ubuntu_user }}/jenkins-slave"
        state: directory
        owner: "{{ ubuntu_user }}"
        group: "{{ ubuntu_user }}"
        mode: 0775

    - name: Install pip, python-dev package with apt
      apt:
        pkg: "{{ item }}"
        state: latest
        update_cache: yes
      with_items:
        - python-dev
        - python-pip

    - name: Upgrade latest pip, setuptools, docker-py and docker-compose with pip
      pip:
        name: "{{ item.name }}"
        state: latest
      with_items:
        - { name: pip, version: latest, install: true }
        - { name: setuptools, version: latest, install: true }
        - { name: docker-py==1.9.0, state: forcereinstall }
        # - { name: docker-compose, version: latest, install: true }
      ignore_errors: yes
      register: docker_py_inastall

    - debug: var=docker_py_inastall verbosity=4

    - name: Checking out Java project
      git: repo=https://github.com/rolindroy/Devops-java-project.git
           dest="/home/{{ ubuntu_user }}/jenkins-slave"

    - name: Running Maven build
      shell: mvn clean compile sonar:sonar -Dsonar.jdbc.url=jdbc:h2:tcp://qa-server.rolindroy.com:9092/sonar -Dsonar.host.url=http://qa-server.rolindroy.com:9000 package  chdir="/home/{{ ubuntu_user }}/jenkins-slave/CounterWebApp"
      register: build_success

    - debug: var=build_success.stdout_lines

    - name: Copy artifact file to current location
      command: mv "/home/{{ ubuntu_user }}/jenkins-slave/CounterWebApp/target/CounterWebApp.war" "/home/{{ ubuntu_user }}/jenkins-slave/CounterWebApp.war"
      register: copy_artifact
      when: build_success.changed

    - name: Build docker image
      command: docker build -t devops_bootstrap/counterapp . chdir="/home/{{ ubuntu_user }}/jenkins-slave"
      when: copy_artifact.changed

    - name: Remove existing container
      docker:
        name: devops_counterapp
        image: "devops_bootstrap/counterapp:latest"
        state: absent

    - name: Run the QA in a docker container
      docker:
        name: devops_counterapp
        image: "devops_bootstrap/counterapp:latest"
        state: reloaded
        publish_all_ports: yes
        ports:
          - "8080:8080"
